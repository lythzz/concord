// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}

model User {
  id                String              @id @default(cuid())
  name              String?             @unique
  email             String?             @unique
  emailVerified     DateTime?           @map("email_verified")
  image             String?
  password          String?
  accounts          Account[]
  tokens            VerificationToken[]
  friendsFirst      Friendship[]        @relation("User1Friendships")
  friendsSecond     Friendship[]        @relation("User2Friendships")
  messages          Message[]
  groupChats        GroupChat[]
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}

model Account {
  id                String              @id @default(cuid())
  userId            String              @map("user_id")
  type              String
  provider          String
  providerAccountId String              @map("provider_account_id")
  refresh_token     String?             @db.Text
  access_token      String?             @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?             @db.Text
  session_state     String?

  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  token             String              @unique @id
  userId            String              @unique @map("user_id")
  expiration        DateTime?
  type              String

  User              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Friendship {
  id                String              @unique @id @default(cuid())
  userFirstId       String              @map("user_first_id")
  userSecondId      String              @map("user_second_id")
  accepted          Boolean             @default(false)
  chat              PrivateChat?
  createdAt         DateTime            @default(now())

  userFirst         User                @relation("User1Friendships", fields: [userFirstId], references: [id])
  userSecond        User                @relation("User2Friendships", fields: [userSecondId], references: [id])
}

model PrivateChat {
  id                String              @unique @id @default(cuid())
  friendshipId      String              @unique         
  messages          Message[]

  friendship        Friendship          @relation(fields: [friendshipId], references: [id])
}

model GroupChat {
  id                String              @unique @id @default(cuid())
  membersId         String[]      
  messages          Message[]

  members           User[]             
}

model Message {
  id                String              @unique @id @default(cuid())
  senderId          String
  privateChatId     String?
  groupChatId       String?
  privateChat       PrivateChat?        @relation(fields: [privateChatId], references: [id])
  groupChat         GroupChat?          @relation(fields: [groupChatId], references: [id])

  sender            User                @relation(fields: [senderId], references: [id])            
}